param($ProjectPath)

# 将字符串转换为 verbatim string
function ToVerbatimString {
    param([Parameter(Mandatory=$true)][string]$Text)
    return '@"' + $Text.Replace('"', '""') + '"'
}

$shouldEmit = -not [string]::IsNullOrWhiteSpace($env:PCL_WRITE_SECRET)

$pairs = @()

if ($shouldEmit) {
    # 获取所有以 PCL_ 开头的环境变量
    $vars = Get-ChildItem Env:PCL_* | Sort-Object Name

    foreach ($v in $vars) {
        $name = [string]$v.Name
        if ($name -eq 'PCL_WRITE_SECRET') { continue }

        $value = [string]$v.Value
        if ([string]::IsNullOrWhiteSpace($value)) { continue }

        if ($name.StartsWith('PCL_')) {
            $key = $name.Substring(4) # 去掉前缀 PCL_
            if (-not [string]::IsNullOrWhiteSpace($key)) {
                $pairs += ,@{
                    Key   = $key
                    Value = ToVerbatimString -Text $value
                }
            }
        }
    }
}

# 生成源码
$nl = "`r`n"
$lines = @()
$lines += '// ** 使用 IDE 删除该文件可能导致项目配置文件中的引用被删除，请谨慎操作 **'
$lines += '// <auto-generated />'
$lines += '// 此文件由 MSBuild 自动生成，请勿手动修改'
$lines += 'namespace PCL.Core.Utils.OS;'
$lines += ''
$lines += 'partial class EnvironmentInterop'
$lines += '{'
$lines += '    private static readonly System.Collections.Generic.Dictionary<string, string> SecretDictionary = new()'
$lines += '    {'

# 写入字典内容
foreach ($p in $pairs) {
    $lines += "        [`"$($p.Key)`"] = $($p.Value),"
}

$lines += '    };'
$lines += '}'

# 写入文件
$outputPath = Join-Path $ProjectPath "Utils\OS\EnvironmentInterop.g.cs"
$code = ($lines -join $nl)
Set-Content -Path $outputPath -Value $code -Encoding UTF8

using System;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Diagnostics;
using Microsoft.CodeAnalysis.Text;

namespace PCL.Core.SourceGenerators;

[Generator]
public class EnvironmentInteropGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // 获取编译选项中的MSBuild属性
        var analyzerConfigProvider = context.AnalyzerConfigOptionsProvider;

        // 注册源代码输出
        context.RegisterSourceOutput(analyzerConfigProvider, static (spc, configProvider) => _Execute(spc, configProvider));
    }

    private static void _Execute(SourceProductionContext context, AnalyzerConfigOptionsProvider _)
    {
        // 遍历转换环境变量并判断 PCL_WRITE_SECRET 是否存在
#pragma warning disable RS1035
        var envs = Environment.GetEnvironmentVariables();
#pragma warning restore RS1035
        var secretPairs = envs.Contains("PCL_WRITE_SECRET") ? (
            from key in (
                from key in envs.Keys.Cast<string>()
                where !string.IsNullOrWhiteSpace(key) && key.StartsWith("PCL_") && key != "PCL_WRITE_SECRET"
                select key.Substring(4)
            )
            let value = envs[key]?.ToString()
            where !string.IsNullOrWhiteSpace(value)
            select (key, _ToVerbatimString(value))
        ) : [];

        var sb = new StringBuilder();
        sb.AppendLine("// ** 使用 IDE 删除该文件可能导致项目配置文件中的引用被删除，请谨慎操作 **");
        sb.AppendLine("// <auto-generated />");
        sb.AppendLine("// 此文件由 Source Generator 自动生成，请勿手动修改");
        sb.AppendLine();
        sb.AppendLine("#nullable enable");
        sb.AppendLine();
        sb.AppendLine("namespace PCL.Core.Utils.OS;");
        sb.AppendLine();
        sb.AppendLine("partial class EnvironmentInterop");
        sb.AppendLine("{");
        sb.AppendLine("    private static readonly System.Collections.Generic.Dictionary<string, string?> SecretDictionary = new()");
        sb.AppendLine("    {");

        foreach (var (key, value) in secretPairs)
            sb.AppendLine($"        [\"{key}\"] = {value},");

        sb.AppendLine("    };");
        sb.AppendLine("}");

        context.AddSource("EnvironmentInterop.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
    }

    private static string _ToVerbatimString(string text)
    {
        return "@\"" + text.Replace("\"", "\"\"") + "\"";
    }
}
